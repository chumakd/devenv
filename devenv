#!/usr/bin/env bash
set -e -o pipefail
shopt -s expand_aliases

### wrapper to run official Docker containers for programming languages

if (( ${BASH_VERSINFO[0]} < 4 )) ; then
    echo "${0##*/}: bash version < 4 is not supported" >&2
    echo 'Try installing a modern bash version with either of:' >&2
    echo '  brew install bash' >&2
    echo '  port install bash' >&2
    exit 1
fi

# a hack for `readlink -f` on BSD systems
if [[ $(uname) == Darwin ]] && ! readlink -f / &> /dev/null ; then
    if which greadlink &> /dev/null ; then
        alias readlink=greadlink
    else
        echo "${0##*/}: \`readlink -f\` doesn't work" >&2
        echo 'Try installing GNU readlink (greadlink) with either of:' >&2
        echo '  brew install coreutils' >&2
        echo '  port install coreutils' >&2
        exit 1
    fi
fi

# constants
readonly SELF="$(readlink -f $0)"
readonly BASE_DIR="${SELF%/*}"
readonly PROG_NAME="${0##*/}"

#colors
readonly NC="$(tput sgr0)" # No Color
readonly LightRed="$(tput bold ; tput setaf 1)"
readonly Yellow="$(tput bold ; tput setaf 3)"
readonly Green="$(tput setaf 2)"

# variables
verbose=false
cmd=start

# utils

_help()
{
    [[ $1 == stdout ]] && usage || usage >&2
    exit 1
}

# TODO: automatic command and options help framework
#       use `fmt` for auto width formatting
usage()
{
    cat <<USAGE_END
Usage: $PROG_NAME
       $PROG_NAME [options] [command [command-options]]

  Helper tool to operate various programming languages environments that are
  based on official Docker images.

  Commands:

    list     Show all supported environments. Option '-a|--all' enables detailed
             listing.

    ps       Show existing containers.

    run <environment> [command [options]]

             Run a command inside an environment, with CWD mounted from the
             host, removing container after exit.

             Example: $PROG_NAME run ruby ./my-script.rb --script-opt script-arg
                      $PROG_NAME run rust cargo new my-project

    init <environment> [name] [options]

             Initialize environment with CWD mounted under '/data/' inside
             container. A custom 'name' can be set for the resulting container,
             which allows creating multiple containers of the same environment
             type (e.g. a container per project). Default name matches
             environment. If 'options' provided, they're passed to the
             \`docker create\` command.

    start [name]

             Start a container. It must be created first, using \`init\`
             command. If name is not specified, container will be searched in
             the list of existing environments attached to the current working
             directory. This is the default command.

    <environment>

             Create specific environment and attach to it.

             Example: $PROG_NAME python-shell
                      $PROG_NAME haskell-repl

    clean [environment]

             Remove all or particular environments (containers).

    help     Show this help screen.

  Options:

    -v|--verbose        Print what's going on.

    -h|--help           Print this help screen.
USAGE_END
}

# TODO: add bye() for normal user interaction and exit
die()
{
    local error='[ERROR]'

    if [[ -t 2 ]] ; then
        error="$LightRed$error$NC"
    fi

    echo -e "$PROG_NAME $error $@" >&2
    exit 1
}

# commands

# TODO: filter by name e.g. python or --all perl
cmd_list()
{
    local filter='grep -Eve -(dbg|shell|repl|x11)$'
    [[ $1 == -a || $1 == --all ]] && filter=cat
    docker-compose ps --services | ${filter}
}

cmd_ps()
{
    if (( $(docker ps --quiet --all --filter 'label=devenv.type' | wc -l) > 0 )) ; then
        docker ps --all --filter 'label=devenv.type' \
                  --format 'table {{.Names}}\t{{.Status}}\t{{.Label "devenv.datadir"}}'
    fi
}

create()
{
    local container=$1

    docker inspect --format '{{.Id}}' $container &>/dev/null ||
        HOST_UID=$(id -u) HOST_GID=$(id -g) \
            docker-compose up --build --no-start $container
}

cmd_start()
{
    local container=$1

    # TODO: search up the dir path if nothin's found for current dir, like git
    if [[ -z $container ]] ; then
        # TODO: get all datadirs and use `realpath --canonicalize-existing` to normalize the current dir and then compare
        local available=( $(docker ps --quiet --all --filter "label=devenv.datadir=$OLDPWD") )

        # TODO: if interactive (e.g. TERM != dumb and -t 1) and no env found for cur dir, list all envs and ask
        (( ${#available[@]} > 0 )) ||
            die "No environment yet exists for current project '$OLDPWD'." \
                "You need to create one first. Please, see \`$PROG_NAME --help\`."

        if (( ${#available[@]} > 1 )) ; then
            local options=()
            local i=
            for (( i=0 ; i < ${#available[@]} ; ++i )) ; do
                options[$i]=$(basename $(docker inspect --format '{{.Name}}' ${available[$i]}))
                # TODO: remove cmd, display only with -v|--verbose, and only if not empty
                #options[$i]+=$(echo -e '\t')$(docker inspect --format '(cmd: {{join .Config.Cmd " "}}' ${available[$i]})
                #options[$i]+=$(docker inspect --format ' {{join .Args " "}})' ${available[$i]})
                options[$i]+=$(docker inspect --format ' {{join .Args " "}}' ${available[$i]})
            done

            local o=
            select o in "${options[@]}" ; do
                if [[ -n $o ]] ; then
                    container=${available[$((REPLY - 1))]}
                    break
                fi
            done

            [[ -n $container ]] ||
                die 'No container selected to run'
        else
            container=${available[0]}
        fi
    fi

    local container_name=$(basename $(docker inspect --format '{{.Name}}' $container))

    # FIXME: -x11 only works on Linux, check `uname`
    [[ $container_name =~ -x11(-|$) ]] ||
        local start_opts='--attach --interactive'

    echo "Starting $container_name"
    docker start $start_opts $container
}

# TODO: clean current by default, if not found ask for a name or --all option
# TODO: add -v option
# TODO: ask confirmation for --all
# TODO: add -y option
cmd_clean()
{
    if [[ -n $1 ]] ; then
        local devenv_type=$(docker inspect --format '{{index .Config.Labels "devenv.type"}}' "$1" 2>/dev/null)

        [[ -n $devenv_type ]] ||
            die "Container '$1' doesn't exist or isn't managed by \`$PROG_NAME\`."

        echo "Removing $1"
        docker rm --force "$1" >/dev/null
    else # clean all
        local containers=( $(docker ps --quiet --all --filter 'label=devenv.type') )

        if (( ${#containers} > 0 )) ; then
            docker-compose down
        fi

        for container in "${containers[@]}"; do
            local container_name=$(docker inspect --format '{{.Name}}' $container 2>/dev/null)
            if [[ -n $container_name ]] ; then
                echo Removing $(basename $container_name)
                docker rm --force $container >/dev/null
            fi
        done
    fi
}

# parse CLI options
while [[ -n $1 ]] ; do
    case $1 in
        -v|--verbose)    verbose=true ;;
        -h|--help|help)  _help stdout ;;

        -*) die "Unknown option '$1', see \`$PROG_NAME --help\`." ;;
        *)  cmd=$1 ; shift ; break ;;
    esac

    shift
done

cd $BASE_DIR

# process commands
case $cmd in
    help)   _help stdout ;;

    list)   cmd_list "$1" ;;
    ps)     cmd_ps ;;
    start)  cmd_start "$1" ;;
    clean)  cmd_clean "$1" ;;

    bash*|clojure*|elixir*|erlang*|fsharp*|gcc*|golang*|haskell*)  ;& # fall through
    julia*|mono*|node*|openjdk*|perl*|python*|ruby*|rust*) ;&
    spacevim|spacemacs*|doom-emacs*)
            container=$cmd
            create "$container"
            cmd_start "$container"
            ;;

            # TODO: enable USER override by the current user IDs
    run)    docker-compose run --rm --volume $OLDPWD:/data --workdir /data "$@" ;;

    init)   [[ -n $1 ]] ||
                die "Missing argument for 'init' command, see \`$PROG_NAME --help\`."

            case ${image:=$1} in
               clang*|spacevim*|spacemacs*|doom-emacs*)
                        image=local/${image%-x11}
                        HOST_UID=$(id -u) HOST_GID=$(id -g) \
                            docker-compose build $1
                        ;&

               bash*|clojure*|elixir*|erlang*|fsharp*|gcc*|golang*|haskell*) ;&
               julia*|mono*|node*|openjdk*|perl*|python*|ruby*|rust*)

                   case $1 in
                       doom-emacs*) docker_opts="--volume $HOME/.doom.d/:/home/linuxbrew/.doom.d" ;;
                       spacemacs*)  docker_opts="--volume $HOME/.spacemacs.d/:/home/linuxbrew/.spacemacs.d" ;;
                       spacevim*)   docker_opts="--volume $HOME/.SpaceVim.d/:/home/linuxbrew/.SpaceVim.d" ;;
                   esac

                   # FIXME: -x11 only works on Linux, check `uname`
                   case $1 in
                       *-x11) docker_opts+=" --volume $HOME/.local/share/fonts:/usr/local/share/fonts"
                              docker_opts+=" --volume /etc/localtime:/etc/localtime:ro"
                              docker_opts+=" --volume /tmp/.X11-unix:/tmp/.X11-unix"
                              docker_opts+=" --env DISPLAY=${DISPLAY:-:0}"
                              ;;
                   esac

                   container=${2:-$1-${OLDPWD##*/}}
                   docker create --name "${container// /-}" \
                                 --tty \
                                 --interactive \
                                 --env TERM=${TERM:-xterm-256color} \
                                 --volume $OLDPWD:/data \
                                 --workdir /data \
                                 --label="devenv.type=$1" \
                                 --label="devenv.datadir=$OLDPWD" \
                                 $docker_opts "${@:3}" $image
                   ;;

               *)  die "Unknown environment '$1', see \`$PROG_NAME list --all\`." ;;
            esac
            ;;

    *) die "Unknown command: '$cmd'" ;;
esac
